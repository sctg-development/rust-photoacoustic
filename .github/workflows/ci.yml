name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build_and_test:
    name: Build and Test on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    
    # Redis service for integration tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: true
    
    steps:
    - uses: actions/checkout@v4
      with: # fetch all submodules
        submodules: 'recursive'
        fetch-depth: 0
    
    # Debug submodules
    - name: Debug submodules
      shell: bash
      run: |
        echo "=== Git submodule status ==="
        git submodule status
        echo "=== .gitmodules content ==="
        cat .gitmodules
        echo "=== Checking rust directory ==="
        ls -la rust/
        echo "=== Force submodule sync and update ==="
        git submodule sync --recursive
        git submodule update --init --recursive --force
        echo "=== Final submodule status ==="
        git submodule status
    
    # Install Rust toolchain
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: 1.86.0
        targets: ${{ matrix.target }}
        components: rustfmt, clippy
    
      
    # Install dependencies for Linux
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config gcc-aarch64-linux-gnu libasound2-dev redis-tools
        
    # Install LLVM and Clang (required for bindgen)
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "14.0"

    # Cache Dependencies
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "rust -> target"
        key: rust-ci-${{ matrix.os }}-${{ matrix.target }}
  
    - name: Create base configuration
      run: |
        cp rust/config.example.yaml rust/config.yaml

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'web/package-lock.json'
    
    - name: Install Node.js dependencies
      run: |
        cd web
        npm install && npm run build
    
    # Build project
    - name: Build
      run: |
          cd rust
          cargo build --target ${{ matrix.target }}
      shell: bash
    
    # Run tests (only on non-cross compilation targets)
    - name: Run tests
      if: matrix.cross == false
      run: |
        cd rust
        cargo test --target ${{ matrix.target }} -- --skip test_acquisition_daemon
    
    # Run Redis integration tests (only on Linux with Redis service)
    - name: Run Redis integration tests
      if: matrix.cross == false && matrix.os == 'ubuntu-latest'
      run: |
        cd rust
        # Wait for Redis to be ready
        timeout 30s bash -c 'until redis-cli ping; do sleep 1; done'
        echo "‚úÖ Redis is ready"
        # Run CI-specific integration tests
        cargo test --test redis_integration_ci_test -- --ignored --nocapture
        # Also run the original integration tests for completeness
        cargo test --test redis_integration_test test_redis_driver_without_server -- --nocapture
      env:
        REDIS_URL: redis://localhost:6379
        
    # Test Redis viewer tool (only on Linux with Redis service)
    - name: Test Redis viewer tool
      if: matrix.cross == false && matrix.os == 'ubuntu-latest'
      run: |
        cd rust
        # Build the redis_viewer tool
        cargo build --bin redis_viewer
        # Test redis_viewer basic functionality
        echo "üîç Testing Redis viewer tool..."
        ./target/debug/redis_viewer --connection-string redis://localhost:6379 --pattern "*" --limit 5 || echo "No keys found, which is expected"
        echo "‚úÖ Redis viewer tool test completed"
      
    # Run specific tests with custom timeout
    - name: Run introspection tests
      if: matrix.cross == false
      run: |
        timeout_cmd=""
        if [[ "${{ runner.os }}" == "Linux" || "${{ runner.os }}" == "macOS" ]]; then
          timeout_cmd="timeout 30s"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          # Using PowerShell timeout equivalent
          timeout_cmd="powershell -Command \"&{Start-Job -ScriptBlock {cargo test --test introspection_test -- --nocapture}; Start-Sleep -s 30; Get-Job | Stop-Job}\""
        fi
        
        if [[ -n "$timeout_cmd" ]]; then
          $timeout_cmd cargo test --test introspection_test -- --nocapture || echo "Test timed out but that's expected"
        else
          cargo test --test introspection_test -- --nocapture
        fi
      shell: bash
