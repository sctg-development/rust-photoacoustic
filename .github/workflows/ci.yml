name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build_and_test:
    name: Build and Test on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: true
    
    steps:
    - uses: actions/checkout@v4
    
    # Install Rust toolchain
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: 1.86.0
        targets: ${{ matrix.target }}
        components: rustfmt, clippy
    
    # Install cross if needed for cross-compilation
    - name: Install cross
      if: matrix.cross
      run: cargo install cross --force
      
    # Install dependencies for Linux
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config gcc-aarch64-linux-gnu libasound2-dev
        
    # Install ARM64 dependencies for cross-compilation
    - name: Install ARM64 dependencies
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        # Remove exisiting Ubuntu sources 
        ls -lR
        sudo rm -vf /etc/apt/sources.list.d/*
        # Add AMD64 architecture
        sudo dpkg --add-architecture amd64
        # Add AMD64 sources
        echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu $(lsb_release -cs) main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ubuntu.list
        sudo apt-get update
        # Add ARM64 architecture
        sudo dpkg --add-architecture arm64
        # Configuration correcte des sources pour ARM64 - utilise ports.ubuntu.com pour tout
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs) main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -cs)-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        
        # Update for ARM64 architecture
        sudo apt-get update
        
        # Install ARM64 dependencies
        sudo apt-get install -y libssl-dev:arm64 libasound2-dev:arm64
    
    # Install LLVM and Clang (required for bindgen)
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "14.0"

    # Cache Dependencies
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
        
    # Debug system configuration for ARM64 targets
    - name: Debug system configuration
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo "Checking ARM64 system configuration..."
        echo "APT sources for ARM64:"
        cat /etc/apt/sources.list.d/arm64.list
        echo "Vérification des paquets ARM64 installés:"
        dpkg -l | grep arm64 || true
        echo "Contenu des répertoires ARM64:"
        ls -la /usr/lib/aarch64-linux-gnu/ || true
        ls -la /usr/include/aarch64-linux-gnu/ || true
        echo "OpenSSL pour ARM64:"
        ls -la /usr/lib/aarch64-linux-gnu/libssl* || true
        echo "PKG_CONFIG_PATH directories:"
        find /usr -name "*.pc" | grep aarch64 || true
    
    # Configure pkg-config for ARM64
    - name: Configure pkg-config for ARM64
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        # Créer un wrapper pkg-config pour ARM64
        echo '#!/bin/bash
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
        export PKG_CONFIG_SYSROOT_DIR=/
        exec pkg-config --define-prefix "$@"
        ' | sudo tee /usr/local/bin/aarch64-linux-gnu-pkg-config
        sudo chmod +x /usr/local/bin/aarch64-linux-gnu-pkg-config
        
        # Tester le wrapper
        echo "Testing ARM64 pkg-config wrapper:"
        /usr/local/bin/aarch64-linux-gnu-pkg-config --list-all || true
        
        # Vérifier la présence des .pc pour OpenSSL
        echo "Checking for OpenSSL .pc files:"
        find /usr -name "openssl.pc" || true
        find /usr -name "libssl.pc" || true
    
    # Build project
    - name: Build
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          # Set up environment variables for cross-compilation
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Setup OpenSSL for ARM64
            export OPENSSL_DIR=/usr
            export OPENSSL_INCLUDE_DIR=/usr/include/aarch64-linux-gnu
            export OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
            export PKG_CONFIG_ALLOW_CROSS=1
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
            export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
            export PKG_CONFIG_SYSROOT_DIR=/
            export PKG_CONFIG=/usr/local/bin/aarch64-linux-gnu-pkg-config
            export OPENSSL_STATIC=1
            # Bypass OpenSSL version check if needed
            export RUSTFLAGS="-C target-feature=+crt-static"
            
            # Tenter de vérifier directement avec pkg-config
            echo "Testing pkg-config for OpenSSL:"
            $PKG_CONFIG --libs --cflags openssl || true
          fi
          
          # First attempt: try to build with all features
          echo "Attempting to build with all features..."
          cross build --target ${{ matrix.target }} || {
            echo "First build attempt failed. Trying without OpenSSL..."
            # Tentative 1: Désactiver les fonctionnalités qui pourraient nécessiter OpenSSL
            cross build --target ${{ matrix.target }} --no-default-features || {
              echo "Second build attempt failed. Trying with vendored OpenSSL..."
              # Tentative 2: Utiliser OpenSSL vendored (compilé avec le projet)
              # Créer un fichier .cargo/config.toml temporaire
              mkdir -p .cargo
              echo '[target.aarch64-unknown-linux-gnu]
              rustflags = ["-C", "target-feature=+crt-static"]
              linker = "aarch64-linux-gnu-gcc"

              [build]
              rustflags = ["-C", "target-cpu=native"]

              [net]
              git-fetch-with-cli = true

              [term]
              progress.when = "always"
              
              [features]
              vendored-openssl = ["openssl-sys/vendored"]
              ' > .cargo/config.toml
              
              # Compiler avec OpenSSL vendu
              OPENSSL_STATIC=1 cross build --target ${{ matrix.target }} -Z features=vendored-openssl || {
                echo "All build attempts failed. Building only the processing modules without visualisation..."
                # Tentative 3: Construire uniquement les modules de traitement de base
                cross build --target ${{ matrix.target }} --lib --bins
              }
            }
          }
        else
          cargo build --target ${{ matrix.target }}
        fi
      shell: bash
    
    # Run tests (only on non-cross compilation targets)
    - name: Run tests
      if: matrix.cross == false
      run: cargo test --target ${{ matrix.target }}
      
    # Run specific tests with custom timeout
    - name: Run introspection tests
      if: matrix.cross == false
      run: |
        timeout_cmd=""
        if [[ "${{ runner.os }}" == "Linux" || "${{ runner.os }}" == "macOS" ]]; then
          timeout_cmd="timeout 30s"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          # Using PowerShell timeout equivalent
          timeout_cmd="powershell -Command \"&{Start-Job -ScriptBlock {cargo test --test introspection_test -- --nocapture}; Start-Sleep -s 30; Get-Job | Stop-Job}\""
        fi
        
        if [[ -n "$timeout_cmd" ]]; then
          $timeout_cmd cargo test --test introspection_test -- --nocapture || echo "Test timed out but that's expected"
        else
          cargo test --test introspection_test -- --nocapture
        fi
      shell: bash
