/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/{_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        /** Answers to OPTIONS requests */
        options: operations["options"];
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User Login
         * @description This function is an API endpoint that allows a user to log in without oauth. It is tagged with "login" for OpenAPI documentation. <br>
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the user's username and password.  <br>
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<LoginReply>` object, which includes the user's information and access token.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the user is not authorized or if the system is in maintenance mode.
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login Options
         * @description This is called by the client for knowing the Oauth2 provider(s) available You must provide a list of Oauth2 providers in the `oauth2.toml` config file The config file can be overridden by the `OAUTH2_CONFIG_FILE` environment variable
         *
         *     This function is an API endpoint that is called by the client to get the list of available OAuth2 providers. The list of providers is defined in the `oauth2.toml` config file, which can be overridden by the `OAUTH2_CONFIG_FILE` environment variable. It is tagged with "login" for OpenAPI documentation.
         *
         *     ## Limitations
         *
         *     It needs to be completed for mapping the username and email from the OAuth2 provider to the SCTGDesk user.
         *
         *     ## Parameters
         *
         *     - none
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<Vec<String>>` object, which includes the list of available OAuth2 providers.  <br> If the config file is not found or cannot be read, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the config file is not found or cannot be read.
         *
         *     # Example
         *
         *     GET /api/login-options
         */
        get: operations["login_options"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the User's Legacy Address Book
         * @description This function is an API endpoint that allows an authenticated user to retrieve their legacy address book. <br> The Legacy Address Book is the address book that was used in the previous version of SCTGDesk. <br> Rustdesk client uses the legacy address book if it cannot find the new one <br> It is tagged with "address book legacy" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - none
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbGetResponse>` object, which includes the legacy address book information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the user is not authorized.
         */
        get: operations["ab_get"];
        put?: never;
        /** @description Set the user's address book */
        post: operations["ab"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get the User's Address Book
         * @description This function is an API endpoint that allows an authenticated user to retrieve their address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - none
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbGetResponse>` object, which includes the address book information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the user is not authorized.
         *
         *     # Example
         *
         *     POST /api/ab/get
         */
        post: operations["ab_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/currentUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get the Current User
         * @description This function is an API endpoint that allows an authenticated user to retrieve their current user information. It is tagged with "user" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the current user information.  <br>
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<CurrentUserResponse>` object, which includes the current user information.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the user is not authorized.
         */
        post: operations["current_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Audit */
        post: operations["audit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log the User Out
         * @description This function is an API endpoint that allows an authenticated user to log out. It is tagged with "login" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the current user information.  <br>
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<LogoutReply>` object, which includes a success message.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the user is not authorized.
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Heartbeat
         * @description This function is an API endpoint that is frequently hit by the client at the /api/heartbeat endpoint. It updates the `last_online` field of the peer. It is tagged with "peer" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the heartbeat information.
         *
         *     ## Returns
         *
         *     This function always returns a `String` with the message "OK".  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode.
         */
        post: operations["heartbeat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sysinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set the System Info
         * @description This function is an API endpoint that allows a connected client to update its system information. It is tagged with "peer" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the system information.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `String` with the message "SYSINFO_UPDATED".  <br> If the system info is not found, this function returns a `String` with the message "ID_NOT_FOUND".  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the system info is not found.
         */
        post: operations["sysinfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the List of Groups
         * @description This function is an API endpoint that allows an authenticated admin to retrieve a paginated list of groups. It is tagged with "group" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `current`: The current page number.
         *
         *     - `pageSize`: The number of groups per page.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<GroupsResponse>` object, which includes a success message, the total number of groups, and the list of groups.  <br> If no groups are found, this function returns a `status::NotFound` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if no groups are found.
         *
         *     # Example
         *
         *     GET /api/groups?current=1&pageSize=10
         */
        get: operations["groups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/group/{guid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Group
         * @description This function is an API endpoint that allows an authenticated admin to retrieve a group. It is tagged with "group" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `guid`: The GUID of the group to retrieve.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<Group>` object If the group is not found, this function returns a `status::NotFound` error.
         */
        get: operations["group_get"];
        put?: never;
        post?: never;
        /**
         * Delete a group
         * @description This function is an API endpoint that allows an authenticated admin to delete a group. It is tagged with "group" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `guid`: The GUID of the group to retrieve.
         *
         *     ## Returns
         */
        delete: operations["group_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a group
         * @description This function is an API endpoint that allows an authenticated admin to update a group.<br> Todo allow to use different team
         *
         *     ## Parameters
         *
         *     - `guid`: The request data, which includes the details of the group to be updated.  <br>
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UsersResponse>` object, which includes a success message, the total number of groups, and the list of groups.  <br>
         */
        put: operations["group_update"];
        /**
         * Add a Group
         * @description This function is an API endpoint that allows an authenticated admin to add a new group. It is tagged with "group" for OpenAPI documentation..<br> Todo allow to use different team
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the details of the group to be added.  <br>
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UsersResponse>` object, which includes a success message, the total number of groups, and the list of groups.  <br> If the admin is not authorized, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the admin is not authorized.
         *
         *     # Example
         *
         *     POST /api/group {"name":"new group","password":"string","confirm-password":"string","email":"string","is_admin":false,"group_name":"string"}
         */
        post: operations["group_add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the List of Users
         * @description This function is an API endpoint that allows an authenticated admin to retrieve a paginated list of users. It is tagged with "user" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `current`: The current page number.
         *
         *     - `pageSize`: The number of users per page.
         *
         *     - `email`: The email to filter the users by.
         *
         *     - `name`: The name to filter the users by.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UserList>` object, which includes a success message, the total number of users, and the list of users.  <br> If no users are found, this function returns a `status::NotFound` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if no users are found.
         *
         *     # Example
         *
         *     GET /api/user-list?current=1&pageSize=10&email=test@test.com&name=Test
         */
        get: operations["users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users for client
         * @description This function is an API endpoint that retrieves all users.
         *
         *     ## Parameters
         *
         *     - `current`: The current page number for pagination. This parameter is currently unused.
         *
         *     - `pageSize`: The number of items per page for pagination. This parameter is currently unused.
         *
         *     - `accessible`: A boolean value indicating whether the user is accessible. This parameter is currently unused.
         *
         *     - `status`: The status of the user. This parameter is currently unused.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UserList>` object containing the users.
         */
        get: operations["users_client"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update user
         * @description This function is an API endpoint that updates a user.<br> Normal user can only update themselves, admin can update any user.<br>
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing the updated user information.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UsersResponse>` object containing the updated user information.
         */
        put: operations["user_update"];
        /**
         * Add user
         * @description This function is an API endpoint that adds a new user.
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing the new user information.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UsersResponse>` object containing the updated user information.
         */
        post: operations["user_add"];
        /**
         * Delete user
         * @description This function is an API endpoint that deletes a user.
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing the list of users to delete.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UsersResponse>` object containing the number of users deleted.
         */
        delete: operations["user_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enable-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable users
         * @description This function is an API endpoint that enables or disables users.
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing the list of users to enable or disable.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<UsersResponse>` object containing the updated user information.
         */
        post: operations["user_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/peers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Peers
         * @description This function is an API endpoint that retrieves the list of all peers in the network. It is tagged with "peer" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - none
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<PeersResponse>` object, which includes a success message, the total number of peers, and the list of peers.  <br> If no peers are found, this function returns a `status::NotFound` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if no peers are found.
         *
         *     # Example
         *
         *     GET /api/peers
         */
        get: operations["peers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/peers/count/{platform}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Count Peers per platform
         * @description This function is an API endpoint that retrieves the count of peers per platform. It is tagged with "peer" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `platform`: The platform to filter the peers by (windows, macos, linux, android or all). <br>
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<PeersCountResponse>` object, which includes the total number of peers for the specified platform.  <br>
         */
        get: operations["peers_count"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/peers/cpus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the List of cpus used by the peers
         * @description This function is an API endpoint that retrieves the count of cpus used by the peers. It is tagged with "peer" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<Vec<CpuCount>>` object, which includes the total number of cpus used by the peers.  <br>
         */
        get: operations["peers_cpus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List strategies
         * @description This function is an API endpoint that retrieves the list of all strategies. <br> TODO: This function is currently unused.
         */
        get: operations["strategies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/oidc/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description OIDC Auth request
         *
         *     This entrypoint is called by the client for getting the authorization url for the Oauth2 provider he chooses
         *
         *     For testing you can generate a valid uuid field with the following command: `uuidgen | base64` # OIDC Auth Request
         *
         *     This function is an API endpoint that is called by the client to get the authorization URL for the chosen OAuth2 provider. It is tagged with "login" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request data, which includes the chosen OAuth2 provider and a UUID.  <br> For testing you can generate a valid uuid field with the following command: `uuidgen | base64`
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<OidcAuthUrl>` object, which includes the authorization URL and a session code.  <br> If the UUID is invalid or the OAuth2 provider is not found, this function returns an `OidcAuthUrl` object with an empty URL and an error code.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the UUID is invalid or the OAuth2 provider is not found.
         *
         *     # Example
         *
         *     POST /api/oidc/auth { "op": "github", "uuid": "generated_uuid_base64_encoded" } */
        post: operations["oidc_auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/oidc/auth-query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OIDC State
         * @description This function is an API endpoint that checks the state of an OpenID Connect (OIDC) session. It is tagged with "login" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `code`: The authorization code received from the OIDC provider.
         *
         *     - `id`: The identifier of the OIDC session.
         *
         *     - `uuid`: The UUID of the OIDC session.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<Option<OidcResponse>>` object.  <br> If the session does not exist, this function returns `Json(None)`.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the session does not exist.
         *
         *     # Example
         *
         *     GET /api/oidc/auth-query?code=authorization_code&id=session_id&uuid=session_uuid
         */
        get: operations["oidc_state"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/oidc/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OIDC Auth Callback
         * @description This function is an API endpoint that serves as the OAuth2 callback. It exchanges the authorization code for an access token and stores it in the state. It is tagged with "login" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `code`: The authorization code received from the OIDC provider.
         *
         *     - `state`: The state parameter received from the OIDC provider. This is the session code.
         *
         *     ## Returns
         *
         *     If successful, this function returns "OK".  <br> If the session does not exist or the code exchange fails, this function returns "ERROR".  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the session does not exist or the code exchange fails.
         *
         *     # Example
         *
         *     GET /api/oidc/callback?code=authorization_code&state=session_code
         */
        get: operations["oidc_callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/oidc/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OIDC Providers
         * @description This function is an API endpoint that retrieves all OIDC providers.
         *
         *     TODO: This function is currently unused.
         */
        get: operations["oidc_get"];
        /**
         * Add OIDC Provider
         * @description This function is an API endpoint that adds an OIDC provider.
         *
         *     TODO: This function is currently unused.
         */
        put: operations["oidc_add"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/peer/add/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add peer
         * @description This function is an API endpoint that adds a peer to an address book.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing the new peer information.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.
         */
        post: operations["ab_peer_add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/peer/update/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update peer
         * @description This function is an API endpoint that updates a peer in an address book.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing the updated peer information.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.
         */
        put: operations["ab_peer_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/peer/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete peer
         * @description This function is an API endpoint that deletes a peer from an address book.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing an array of peer IDs to be deleted.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.
         */
        delete: operations["ab_peer_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/peers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List peers
         * @description This function is an API endpoint that lists the peers in an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `current`: The current page number for pagination. This parameter is currently unused.
         *
         *     - `pageSize`: The number of items per page for pagination. This parameter is currently unused.
         *
         *     - `ab`: The identifier of the address book.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbPeersResponse>` object containing the peers in the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         */
        post: operations["ab_peers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/personal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Personal Address Book
         * @description This function is an API endpoint that retrieves the personal address book of the authenticated user. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - none
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbPersonal>` object.  <br> If the user is not authorized to access their personal address book, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the user is not authorized to access their personal address book.
         *
         *     # Example
         *
         *     POST /api/ab/personal
         */
        post: operations["ab_personal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/tags/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get the Tags
         * @description This function is an API endpoint that retrieves all tags from an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     ## Returns
         *
         *     If successful, this function returns a JSON array of `AbTag` objects.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::NotFound` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         *
         *     # Example
         *
         *     POST /api/ab/tags/018fab24-0ae5-731c-be23-88aa4518ea26
         */
        post: operations["ab_tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/tag/add/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a Tag
         * @description This function is an API endpoint that adds a new tag to an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing the new tag to be added.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag already exists or the user is not authorized to add it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the tag already exists or the user is not authorized to add it.
         *
         *     # Example
         *
         *     POST /api/ab/tag/add/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json
         *
         *     {"name": "tag1", "color": "#FF0000"}
         */
        post: operations["ab_tag_add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/tag/update/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a Tag
         * @description This function is an API endpoint that updates a tag in an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing the updated tag.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to update it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to update it.
         *
         *     # Example
         *
         *     PUT /api/ab/tag/update/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json
         *
         *     {"name": "tag1", "color": "#FF0000"}
         */
        put: operations["ab_tag_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/tag/rename/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Rename a Tag
         * @description This function is an API endpoint that renames a tag in an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing the old and new names of the tag.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.  <br> If the tag does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the tag does not exist or the user is not authorized to access it.
         *
         *     # Example
         *
         *     PUT /api/ab/tag/rename/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json
         *
         *     {"old": "tag1", "new": "tag2"}
         */
        put: operations["ab_tag_rename"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/tag/{ab}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a Tag
         * @description This function is an API endpoint that deletes a tag from an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `ab`: The identifier of the address book.
         *
         *     - `request`: A JSON object containing an array of tag names to be deleted.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.  <br> If the request is empty or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the request is empty or the user is not authorized to access it.
         *
         *     # Example
         *
         *     DELETE /api/ab/tag/018fab24-0ae5-731c-be23-88aa4518ea26 Content-Type: application/json
         *
         *     ["tag1", "tag2"]
         */
        delete: operations["ab_tag_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/shared/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Shared Profiles
         * @description This function is an API endpoint that retrieves the shared profiles from an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - none
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the shared profiles in the address book.  <br> rule: 1: read, 2: write, 3: full control  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         *
         *     # Example
         *
         *     {"data":[{"guid":"018fab24-0ae5-731c-be23-88aa4518ea26","name":"shared profile","owner":"admin","rule":3}],"total":2}
         */
        post: operations["ab_shared"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/shared/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add shared profile
         * @description This function is an API endpoint that adds a shared profile to an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing the shared profile to be added.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the shared profiles in the address book.  <br>
         */
        post: operations["ab_shared_add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/shared": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete shared profiles
         * @description This function is an API endpoint that deletes shared profiles from an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing an array of shared profile GUIDs to be deleted.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` object.
         */
        delete: operations["ab_shared_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/shared/update/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update shared profile name
         * @description This function is an API endpoint that updates the name of a shared profile in an address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: A JSON object containing the updated shared profile information.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbSharedProfilesResponse>` object containing the updated shared profile information.
         */
        put: operations["ab_shared_name"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Settings
         * @description This function is an API endpoint that retrieves the settings for an address book.<br> TODO: Implement the settings for an address book.
         */
        post: operations["ab_settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the rules
         * @description This function is an API endpoint that lists the rules attached to a shared address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `current`: The current page number for pagination. This parameter is currently unused.
         *
         *     - `pageSize`: The number of items per page for pagination. This parameter is currently unused.
         *
         *     - `ab`: The identifier of the shared address book.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<AbRulesResponse>` object containing the rules for the address book.  <br> If the address book does not exist or the user is not authorized to access it, this function returns a `status::Unauthorized` error.  <br>
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode, or if the address book does not exist or the user is not authorized to access it.
         */
        get: operations["ab_rules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ab/rule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a Rule
         * @description This function is an API endpoint that adds a new rule to a shared address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request containing the details of the rule to be added.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully added. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode.
         */
        post: operations["ab_rule_add"];
        /**
         * Delete a Rule
         * @description This function is an API endpoint that deletes a rule from a shared address book. It is tagged with "address book" for OpenAPI documentation.
         *
         *     ## Parameters
         *
         *     - `request`: The request containing the GUID of the rule to be deleted.
         *
         *     ## Returns
         *
         *     If successful, this function returns an `ActionResponse::Empty` indicating that the rule was successfully deleted. <br> If the system is in maintenance mode, this function returns a `status::Unauthorized` error.
         *
         *     ## Errors
         *
         *     This function will return an error if the system is in maintenance mode.
         */
        delete: operations["ab_rule_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/software/client-download-link/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the software download url
         *
         *     # Arguments
         *
         *     * `key` - The key to the software download link, it can be `osx`, `w64` or `ios`
         *
         *     # Usage
         *
         *     * it needs a valid S3 configuration file defined with the `S3_CONFIG_FILE` environment variable
         *
         *     <pre> [s3config]<br> Page = "https://github.com/rustdesk/rustdesk/releases/latest"<br> Endpoint = "https://compat.objectstorage.eu-london-1.oraclecloud.com"<br> Region = "eu-london-1"<br> AccessKey = "c324ead11faa0d87337c07ddc4a1129fab76188d"<br> SecretKey = "GJurV55f/LD36kjZFpchZMj/uvgTqxHyFkBchUUa8KA="<br> Bucket = "aezoz24elapn"<br> Windows64Key = "master/sctgdesk-releases/sctgdesk-1.2.4-x86_64.exe"<br> Windows32Key = "master/sctgdesk-releases/sctgdesk-1.2.4-i686.exe"<br> OSXKey = "master/sctgdesk-releases/sctgdesk-1.2.4.dmg"<br> OSXArm64Key = "master/sctgdesk-releases/sctgdesk-1.2.4.dmg"<br> IOSKey = "master/sctgdesk-releases/sctgdesk-1.2.4.ipa"<br> </pre> */
        get: operations["software"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/software/version/server": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the server version
         * @description This function is an API endpoint that retrieves the version of the server. It is tagged with "software" for OpenAPI documentation.
         *
         *     ## Returns
         *
         *     If successful, this function returns a `Json<SoftwareVersionResponse>` object containing the version of the server.
         */
        get: operations["software_version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/software/releases/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the client version
         * @description This function is an API endpoint that retrieves the version of the client. It copies the GitHub method of retrieving the latest release version. It is tagged with "software" for OpenAPI documentation.
         *
         *     It can be used by replacing the check_software_update() from the client. You can find the client code at rustdesk/src/common.rs ## Returns
         *
         *     Returns in the location header the URL of the latest release. something like https://api-server/api/releases/tag/1.2.6
         *
         *     ## Example
         *
         *     It is easy to modify the client code to use this API endpoint. this is how we can modify the client code to use this API endpoint.
         *
         *     <pre> // see <a href='https://github.com/sctg-development/sctgdesk/blob/481d3516fef1daa145d8044594187cb11959f8be/src/common.rs#L953L972'>Sample modification on github</a><br> let url=format!("{}/api/software/releases/latest",get_api_server("".to_owned(), "".to_owned())).to_owned();<br> log::info!("URL for checking software updates: {}", url);<br> </pre>
         */
        get: operations["software_releases_latest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/software/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Redirect to the software download page
         * @description This function is an API endpoint that redirects to the software download page. You must set the `Page` key in the `s3config` of the S3 configuration file.
         */
        get: operations["software_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/software/releases/tag/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Simulate GitHub API for releases
         * @description This function is an API endpoint that simulates the GitHub API for releases.
         *
         *     ## Parameters
         *
         *     - `version`: The version of the release.
         *
         *     ## Returns
         *
         *     Returns a `Json<SoftwareVersionResponse>` object containing the version of the release.
         */
        get: operations["software_releases_tag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["webconsole_index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.html": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["webconsole_index_html"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginReply: {
            type: string;
            user: components["schemas"]["UserInfo"];
            access_token: components["schemas"]["Token"];
        };
        UserInfo: {
            name: string;
            email?: string | null;
            admin: boolean;
        };
        Token: number[];
        LoginRequest: {
            username: string;
            password: string;
            id: string;
            uuid: string;
        };
        AbGetResponse: {
            error?: boolean | null;
            updated_at?: string | null;
            data: string;
        };
        AbRequest: {
            data: string;
        };
        CurrentUserResponse: {
            error: boolean;
            name: string;
            email?: string | null;
            admin: boolean;
        };
        CurrentUserRequest: {
            id: string;
            uuid: string;
        };
        AuditRequest: {
            /**
             * Format: uint
             * @default 0
             */
            Id: number;
            /** @default  */
            action: string;
            /** @default  */
            id: string;
            /** @default  */
            ip: string;
            /** @default  */
            uuid: string;
        };
        LogoutReply: {
            data: string;
        };
        HeartbeatRequest: {
            id: string;
            /** Format: uint64 */
            modified_at: number;
            uuid: string;
            /** Format: uint32 */
            ver: number;
        };
        SystemInfo: {
            cpu?: string | null;
            hostname?: string | null;
            id?: string | null;
            memory?: string | null;
            os?: string | null;
            username?: string | null;
            uuid?: string | null;
            version?: string | null;
            ip?: string | null;
        };
        GroupsResponse: {
            msg: string;
            /** Format: uint32 */
            total: number;
            data: components["schemas"]["Group"][];
        };
        Group: {
            guid: string;
            name: string;
            team: string;
            created_at: string;
            access_to: string[];
            accessed_from: string[];
            note?: string | null;
            info: string;
        };
        UsersResponse: {
            msg: string;
            /** Format: uint32 */
            total: number;
            data: string;
        };
        AddGoupRequest: {
            name: string;
            note: string;
            allowed_outgoings: string[];
            allowed_incomings: string[];
        };
        UpdateGoupRequest: {
            guid: string;
            name: string;
            note: string;
            allowed_outgoings: string[];
            allowed_incomings: string[];
        };
        UserList: {
            msg: string;
            /** Format: uint32 */
            total: number;
            data: components["schemas"]["UserListResponse"][];
        };
        UserListResponse: {
            guid: string;
            name: string;
            email: string;
            note?: string | null;
            /** Format: int32 */
            status: number;
            group_name: string;
            is_admin: boolean;
        };
        AddUserRequest: {
            name: string;
            password: string;
            "confirm-password": string;
            email: string;
            is_admin: boolean;
            group_name: string;
        };
        DeleteUserRequest: {
            rows: string[];
        };
        EnableUserRequest: {
            rows: string[];
            disable: boolean;
        };
        UpdateUserRequest: {
            uuid: string;
            name?: string | null;
            password?: string | null;
            "confirm-password"?: string | null;
            email?: string | null;
            is_admin?: boolean | null;
            group_name?: string | null;
            note?: string | null;
            /** Format: int32 */
            status?: number | null;
        };
        PeersResponse: {
            msg: string;
            /** Format: uint32 */
            total: number;
            data: components["schemas"]["Peer"][];
        };
        Peer: {
            guid: string;
            id: string;
            /** Format: int32 */
            status: number;
            strategy_name: string;
            last_online: string;
            info: components["schemas"]["PeerInfo"];
        };
        PeerInfo: {
            cpu?: string | null;
            hostname?: string | null;
            id?: string | null;
            memory?: string | null;
            os?: string | null;
            username?: string | null;
            uuid?: string | null;
            version?: string | null;
            ip?: string | null;
        };
        PeersCountResponse: {
            /** Format: uint32 */
            total: number;
        };
        CpuCount: {
            cpu: string;
            /** Format: uint32 */
            total: number;
        };
        OidcAuthUrl: {
            code: string;
            url: string;
        };
        OidcAuthRequest: {
            deviceInfo: components["schemas"]["OidcDeviceInfo"];
            id: string;
            op: string;
            uuid: string;
        };
        OidcDeviceInfo: {
            name: string;
            os: string;
            type: string;
        };
        OidcResponse: {
            access_token: string;
            type: string;
            tfa_type: string;
            secret: string;
            user: components["schemas"]["OidcUser"];
        };
        OidcUser: {
            name: string;
            email: string;
            note: string;
            /** Format: int64 */
            status: number;
            info: components["schemas"]["OidcUserInfo"];
            is_admin: boolean;
            third_auth_type: string;
        };
        OidcUserInfo: {
            email_verification: boolean;
            email_alarm_notification: boolean;
            login_device_whitelist: string[];
            other: {
                [key: string]: string;
            };
        };
        OidcSettingsResponse: {
            /** Format: uint32 */
            max_auth_count: number;
            callback_url: string;
            providers: components["schemas"]["Provider"][];
        };
        Provider: {
            name: string;
            /** Format: uint32 */
            order_index: number;
            enabled: boolean;
            client_id: string;
            client_secret: string;
            authorization_endpoint: string;
            token_endpoint: string;
            userinfo_endpoint: string;
        };
        AbPeer: {
            id: string;
            hash?: string | null;
            password?: string | null;
            username?: string | null;
            hostname?: string | null;
            platform?: string | null;
            alias?: string | null;
            tags?: string[] | null;
            forceAlwaysRelay?: boolean | null;
            rdpPort?: string | null;
            rdpUsername?: string | null;
            loginName?: string | null;
            same_server?: boolean | null;
        };
        AbPeersResponse: {
            error?: string | null;
            /** Format: uint32 */
            total: number;
            data: components["schemas"]["AbPeer"][];
        };
        AbPersonal: {
            guid: string;
            error?: string | null;
        };
        AbTag: {
            name: string;
            /** Format: uint32 */
            color: number;
        };
        AbTagRenameRequest: {
            old: string;
            new: string;
        };
        AbSharedProfilesResponse: {
            error?: string | null;
            /** Format: uint32 */
            total: number;
            data: components["schemas"]["AbProfile"][];
        };
        AbProfile: {
            guid: string;
            name: string;
            owner: string;
            note?: string | null;
            /** Format: uint32 */
            rule: number;
        };
        AbSharedAddRequest: {
            name: string;
            note?: string | null;
        };
        AbSharedNameRequest: {
            name?: string | null;
            note?: string | null;
            guid: string;
        };
        AbSettingsResponse: {
            error?: string | null;
            /** Format: uint32 */
            max_peer_one_ab: number;
        };
        AbRulesResponse: {
            msg: string;
            /** Format: uint32 */
            total: number;
            data: components["schemas"]["AbRule"][];
        };
        AbRule: {
            guid: string;
            user?: string | null;
            group?: string | null;
            /** Format: uint32 */
            rule: number;
        };
        AbRuleAddRequest: {
            guid: string;
            user?: string | null;
            group?: string | null;
            /** Format: uint32 */
            rule: number;
        };
        AbRuleDeleteRequest: {
            guid: string;
        };
        SoftwareResponse: {
            url: string;
        };
        SoftwareVersionResponse: {
            server?: string | null;
            client?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    options: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginReply"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login_options: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbGetResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbGetResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    current_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CurrentUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentUserResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    audit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuditRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CurrentUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutReply"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    heartbeat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HeartbeatRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    sysinfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SystemInfo"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    groups: {
        parameters: {
            query: {
                current: number;
                pageSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupsResponse"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    group_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                guid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    group_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                guid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    group_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGoupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    group_add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddGoupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users: {
        parameters: {
            query: {
                current: number;
                pageSize: number;
                email?: string | null;
                name?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserList"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_client: {
        parameters: {
            query: {
                current: number;
                pageSize: number;
                accessible?: boolean | null;
                status?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserList"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_enable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnableUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    peers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PeersResponse"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    peers_count: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                platform: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PeersCountResponse"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    peers_cpus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CpuCount"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    strategies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersResponse"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oidc_auth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OidcAuthRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OidcAuthUrl"];
                };
            };
        };
    };
    oidc_state: {
        parameters: {
            query: {
                code: string;
                id: string;
                uuid: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OidcResponse"];
                };
            };
        };
    };
    oidc_callback: {
        parameters: {
            query: {
                code: string;
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    oidc_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OidcSettingsResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    oidc_add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnableUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnableUserRequest"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_peer_add: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbPeer"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_peer_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbPeer"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_peer_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_peers: {
        parameters: {
            query: {
                current: number;
                pageSize: number;
                ab: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbPeersResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_personal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbPersonal"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_tags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbTag"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_tag_add: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbTag"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_tag_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbTag"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_tag_rename: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbTagRenameRequest"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_tag_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ab: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_shared: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbSharedProfilesResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_shared_add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbSharedAddRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbSharedProfilesResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_shared_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_shared_name: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbSharedNameRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbSharedProfilesResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbSettingsResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_rules: {
        parameters: {
            query: {
                current: number;
                pageSize: number;
                ab: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AbRulesResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_rule_add: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbRuleAddRequest"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ab_rule_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbRuleDeleteRequest"];
            };
        };
        responses: {
            /** @description \
             *                 # [200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)
             *                 This response is given when the request is successful.
             *                 The body is empty if there is no error,
             *                 The body contains a json object with the error {"error":"Error message"}
             *                  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description # [422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)
             *     This response is given when you request body is not correctly formatted.  */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    software: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwareResponse"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    software_version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwareVersionResponse"];
                };
            };
        };
    };
    software_releases_latest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    software_download: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    software_releases_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwareVersionResponse"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    webconsole_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    webconsole_index_html: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
