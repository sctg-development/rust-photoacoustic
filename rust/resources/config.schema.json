{
  "$schema": "http://json-schema.org/draft-2020-12/schema",
  "type": "object",
  "properties": {
    "visualization": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65534
        },
        "address": {
          "type": "string",
          "anyOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ],
          "description": "IPv4 or IPv6 address to bind the visualization service to."
        },
        "name": {
          "type": "string"
        },
        "cert": {
          "type": [
            "string",
            "null"
          ],
          "description": "PEM TLS certificate file (base64 encoded)"
        },
        "key": {
          "type": [
            "string",
            "null"
          ],
          "description": "PEM TLS private key file (base64 encoded)"
        },
        "hmac_secret": {
          "type": "string",
          "description": "HMAC secret for JWT token signing"
        },
        "rs256_private_key": {
          "type": [
            "string",
            "null"
          ],
          "description": "RS256 private key for JWT token signing (base64 encoded)"
        },
        "rs256_public_key": {
          "type": [
            "string",
            "null"
          ],
          "description": "RS256 public key for JWT token verification (base64 encoded)"
        },
        "session_secret": {
          "type": [
            "string"
          ],
          "description": "Session secret for cookie signing (base64 encoded) can be generated with openssl rand -base64 32"
        },
        "compression": {
          "type": "boolean",
          "default": true,
          "description": "Enable compression at the Rocket level"
        }
      },
      "required": [
        "port",
        "address",
        "name",
        "hmac_secret",
        "rs256_private_key",
        "rs256_public_key",
        "session_secret"
      ]
    },
    "modbus": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65534
        },
        "address": {
          "type": "string",
          "anyOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ],
          "description": "IPv4 or IPv6 address to bind the Modbus service to."
        },
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable Modbus TCP server"
        }
      },
      "required": [
        "port",
        "address"
      ]
    },
    "acquisition": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable data acquisition"
        },
        "interval_ms": {
          "type": "integer",
          "minimum": 10,
          "default": 1000,
          "description": "Data acquisition interval in milliseconds"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "photoacoustic": {
      "type": "object",
      "properties": {
        "input_device": {
          "type": [
            "string",
            "null"
          ],
          "description": "The input device to use for data acquisition use first to use the first available device (mutually exclusive with input_file)"
        },
        "input_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "The input file to use for data acquisition (mutually exclusive with input_device)"
        },
        "frequency": {
          "type": "number",
          "minimum": 100,
          "maximum": 20000,
          "description": "The excitation frequency in Hz"
        },
        "bandwidth": {
          "type": "number",
          "minimum": 1,
          "maximum": 250,
          "description": "Filter bandwidth in Hz"
        },
        "frame_size": {
          "type": "integer",
          "minimum": 256,
          "maximum": 8192,
          "description": "Window size for FFT analysis"
        },
        "averages": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "description": "Number of spectra to average"
        },
        "sampling_rate": {
          "type": "integer",
          "minimum": 8192,
          "maximum": 196608,
          "description": "Sampling rate in Hz"
        },
        "precision": {
          "type": "integer",
          "enum": [
            8,
            16,
            24,
            32
          ],
          "description": "Precision of sampling (bits, allowed: 8, 16, 24, 32)"
        },
        "simulated_source": {
          "type": [
            "object",
            "null"
          ],
          "description": "Configuration for simulated photoacoustic sources (replaces mock_source and mock_correlation)",
          "properties": {
            "source_type": {
              "type": "string",
              "enum": [
                "mock",
                "universal"
              ],
              "default": "mock",
              "description": "Source type: 'mock' for simple MockSource or 'universal' for full physics simulation"
            },
            "correlation": {
              "type": "number",
              "minimum": -1.0,
              "maximum": 1.0,
              "default": 0.8,
              "description": "Inter-channel correlation coefficient [-1.0, 1.0] for dual-microphone configuration (used by mock source)"
            },
            "background_noise_amplitude": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.1,
              "description": "Background noise amplitude [0.0, 1.0] - thermal and electronic noise"
            },
            "resonance_frequency": {
              "type": "number",
              "minimum": 100.0,
              "maximum": 20000.0,
              "default": 2100.0,
              "description": "Helmholtz resonance frequency [Hz] - cell acoustic resonance"
            },
            "laser_modulation_depth": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.8,
              "description": "Laser modulation depth [0.0, 1.0] - photoacoustic signal strength"
            },
            "signal_amplitude": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.5,
              "description": "Base photoacoustic signal amplitude [0.0, 1.0]"
            },
            "phase_opposition_degrees": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 180.0,
              "default": 180.0,
              "description": "Phase opposition between microphones [degrees] - differential configuration"
            },
            "temperature_drift_factor": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 0.1,
              "default": 0.01,
              "description": "Temperature drift effect factor [0.0, 0.1] - thermal stability"
            },
            "gas_flow_noise_factor": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.05,
              "description": "Gas flow noise factor [0.0, 1.0] - turbulent flow effects"
            },
            "snr_factor": {
              "type": "number",
              "minimum": 0.1,
              "maximum": 100.0,
              "default": 10.0,
              "description": "Signal-to-noise ratio factor [0.1, 100.0] - measurement quality"
            },
            "modulation_mode": {
              "type": "string",
              "enum": [
                "amplitude",
                "pulsed"
              ],
              "default": "amplitude",
              "description": "Laser modulation mode: 'amplitude' (continuous) or 'pulsed' (discrete)"
            },
            "pulse_width_seconds": {
              "type": "number",
              "minimum": 0.001,
              "maximum": 1.0,
              "default": 0.05,
              "description": "Pulse width [seconds] - for pulsed modulation mode"
            },
            "pulse_frequency_hz": {
              "type": "number",
              "minimum": 1.0,
              "maximum": 1000.0,
              "default": 20.0,
              "description": "Pulse frequency [Hz] - for pulsed modulation mode"
            }
          }
        },
        "record_consumer": {
          "type": "boolean",
          "default": false,
          "description": "Use a record consumer for testing purposes"
        },
        "record_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "File to record the data to)"
        }
      },
      "required": [
        "frequency",
        "bandwidth",
        "frame_size",
        "averages"
      ],
      "oneOf": [
        {
          "required": [
            "input_device"
          ]
        },
        {
          "required": [
            "input_file"
          ]
        }
      ]
    },
    "access": {
      "type": "object",
      "description": "Access control settings for users and OAuth2 clients",
      "properties": {
        "duration": {
          "type": "integer",
          "minimum": 3600,
          "maximum": 31557600
        },
        "iss": {
          "type": "string",
          "description": "issuer for the jwt"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "user": {
                "type": "string",
                "description": "Username for authentication"
              },
              "pass": {
                "type": "string",
                "description": "Base64-encoded password hash (created with openssl passwd -5 | base64 -w0)"
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "read:api",
                    "write:api",
                    "admin:api",
                    "openid",
                    "profile",
                    "email"
                  ]
                },
                "minItems": 1,
                "description": "List of permissions granted to the user"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Email address of the user"
              },
              "name": {
                "type": "string",
                "description": "Full name of the user"
              }
            },
            "required": [
              "user",
              "pass",
              "permissions"
            ]
          },
          "description": "List of users with their credentials and permissions"
        },
        "clients": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "client_id": {
                "type": "string",
                "description": "Unique identifier for the OAuth2 client"
              },
              "allowed_callbacks": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri",
                  "description": "Valid callback URI for this client"
                },
                "minItems": 1,
                "description": "List of allowed callback URLs for this OAuth2 client"
              },
              "default_scope": {
                "type": "string",
                "description": "Default scopes granted to this client"
              }
            },
            "required": [
              "client_id",
              "allowed_callbacks"
            ]
          },
          "description": "List of OAuth2 clients with their identifiers and allowed callback URLs"
        }
      },
      "required": [
        "users",
        "clients"
      ]
    },
    "generix": {
      "type": "object",
      "description": "OAuth2 and OpenID Connect configuration (client side)",
      "properties": {
        "provider": {
          "type": "string",
          "enum": [
            "generix"
          ],
          "description": "OAuth provider type. Only 'generix' is supported"
        },
        "api_base_url": {
          "type": "string",
          "format": "uri",
          "description": "Base URL of the API server"
        },
        "authority": {
          "type": "string",
          "format": "uri",
          "description": "Authority URL for the OAuth2/OpenID Connect provider"
        },
        "client_id": {
          "type": "string",
          "description": "Client ID for OAuth2/OpenID Connect"
        },
        "scope": {
          "type": "string",
          "description": "Scopes requested by the client (space-separated)"
        },
        "redirect_uri": {
          "type": "string",
          "format": "uri",
          "description": "Redirect URI for the client after authentication"
        },
        "audience": {
          "type": "string",
          "description": "Audience in the JWT token"
        },
        "token_issuer": {
          "type": "string",
          "format": "uri",
          "description": "Token issuer base URL"
        },
        "jwks_endpoint": {
          "type": "string",
          "format": "uri",
          "description": "Endpoint for JSON Web Key Set (JWKS)"
        },
        "domain": {
          "type": "string",
          "description": "Domain for the client application"
        },
        "issuer": {
          "type": "string",
          "description": "Issuer for checking the iss claim in JWT tokens"
        }
      },
      "required": [
        "provider",
        "api_base_url",
        "client_id",
        "scope",
        "redirect_uri",
        "audience",
        "token_issuer",
        "jwks_endpoint",
        "domain",
        "issuer"
      ]
    },
    "processing": {
      "type": "object",
      "description": "Audio processing pipeline configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable or disable the processing consumer"
        },
        "result_buffer_size": {
          "type": "integer",
          "minimum": 1,
          "description": "Buffer size for processing results broadcasting"
        },
        "default_graph": {
          "type": "object",
          "description": "Default processing graph configuration",
          "properties": {
            "id": {
              "type": "string",
              "description": "Graph identifier"
            },
            "nodes": {
              "type": "array",
              "description": "List of processing nodes",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Node identifier"
                  },
                  "node_type": {
                    "type": "string",
                    "enum": [
                      "input",
                      "filter",
                      "differential",
                      "channel_selector",
                      "channel_mixer",
                      "photoacoustic_output",
                      "record",
                      "streaming"
                    ],
                    "description": "Type of processing node"
                  },
                  "parameters": {
                    "description": "Node-specific parameters",
                    "anyOf": [
                      {
                        "type": "null",
                        "description": "No parameters"
                      },
                      {
                        "type": "object",
                        "description": "Filter node parameters",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "bandpass",
                              "lowpass",
                              "highpass"
                            ],
                            "description": "Filter type"
                          },
                          "center_frequency": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 50000,
                            "description": "Center frequency in Hz (required for bandpass filters)"
                          },
                          "bandwidth": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 10000,
                            "description": "Bandwidth in Hz (required for bandpass filters)"
                          },
                          "cutoff_frequency": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 50000,
                            "description": "Cutoff frequency in Hz (required for lowpass and highpass filters)"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "allOf": [
                          {
                            "if": {
                              "properties": {
                                "type": {
                                  "const": "bandpass"
                                }
                              }
                            },
                            "then": {
                              "required": [
                                "center_frequency",
                                "bandwidth"
                              ]
                            }
                          },
                          {
                            "if": {
                              "properties": {
                                "type": {
                                  "enum": [
                                    "lowpass",
                                    "highpass"
                                  ]
                                }
                              }
                            },
                            "then": {
                              "required": [
                                "cutoff_frequency"
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Channel selector parameters",
                        "properties": {
                          "target_channel": {
                            "type": "string",
                            "enum": [
                              "ChannelA",
                              "ChannelB"
                            ],
                            "description": "Target channel for selection"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Record node parameters",
                        "properties": {
                          "record_file": {
                            "type": "string",
                            "description": "Path to the output recording file"
                          },
                          "max_size_kb": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "Maximum size per recording file in kilobytes"
                          },
                          "auto_delete": {
                            "type": "boolean",
                            "description": "Whether to automatically delete files when max_size_kb is reached"
                          },
                          "total_limit": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "Maximum total size of all recordings in kilobytes. When exceeded, oldest files are deleted."
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Other node parameters"
                      }
                    ]
                  }
                },
                "required": [
                  "id",
                  "node_type"
                ]
              }
            },
            "connections": {
              "type": "array",
              "description": "List of connections between nodes",
              "items": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "Source node identifier"
                  },
                  "to": {
                    "type": "string",
                    "description": "Target node identifier"
                  }
                },
                "required": [
                  "from",
                  "to"
                ]
              }
            },
            "output_node": {
              "type": [
                "string",
                "null"
              ],
              "description": "Output node identifier"
            }
          }
        },
        "performance": {
          "type": "object",
          "description": "Processing performance settings",
          "properties": {
            "max_processing_time_us": {
              "type": "integer",
              "minimum": 1,
              "description": "Maximum processing time per frame (microseconds)"
            },
            "enable_stats": {
              "type": "boolean",
              "description": "Enable detailed processing statistics"
            },
            "stats_interval_ms": {
              "type": "integer",
              "minimum": 1,
              "description": "Statistics update interval (milliseconds)"
            }
          }
        }
      }
    }
  },
  "required": [
    "visualization"
  ]
}