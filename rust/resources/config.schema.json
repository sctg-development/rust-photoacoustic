{
  "$schema": "http://json-schema.org/draft-2020-12/schema",
  "type": "object",
  "properties": {
    "visualization": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65534
        },
        "address": {
          "type": "string",
          "anyOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ],
          "description": "IPv4 or IPv6 address to bind the visualization service to."
        },
        "name": {
          "type": "string"
        },
        "cert": {
          "type": [
            "string",
            "null"
          ],
          "description": "PEM TLS certificate file (base64 encoded)"
        },
        "key": {
          "type": [
            "string",
            "null"
          ],
          "description": "PEM TLS private key file (base64 encoded)"
        },
        "hmac_secret": {
          "type": "string",
          "description": "HMAC secret for JWT token signing"
        },
        "rs256_private_key": {
          "type": [
            "string",
            "null"
          ],
          "description": "RS256 private key for JWT token signing (base64 encoded)"
        },
        "rs256_public_key": {
          "type": [
            "string",
            "null"
          ],
          "description": "RS256 public key for JWT token verification (base64 encoded)"
        },
        "session_secret": {
          "type": [
            "string"
          ],
          "description": "Session secret for cookie signing (base64 encoded) can be generated with openssl rand -base64 32"
        },
        "compression": {
          "type": "boolean",
          "default": true,
          "description": "Enable compression at the Rocket level"
        },
        "output": {
          "type": "array",
          "description": "Configuration for visualization output display items",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for this output configuration"
              },
              "action_node_id": {
                "type": "string",
                "description": "ID of the action node providing the measurement data"
              },
              "molecule": {
                "type": "string",
                "description": "Name of the molecule being measured (e.g., 'H₂S', 'CO₂', 'CH₄')"
              },
              "unit": {
                "type": "string",
                "description": "Unit of measurement (e.g., 'ppm', 'mg/m³', '%')"
              },
              "display_order": {
                "type": "integer",
                "description": "Display order in the interface (negative values hide the item)"
              },
              "description": {
                "type": "string",
                "description": "Description of the measurement (e.g., 'Spectral ray 3963nm')"
              },
              "concentration_min": {
                "type": "number",
                "description": "Minimum concentration value for display (e.g., 0.0 for no lower limit)"
              },
              "concentration_max": {
                "type": "number",
                "description": "Maximum concentration value for display (e.g., 10000.0 for no upper limit)"
              }

            },
            "required": [
              "id",
              "action_node_id",
              "molecule",
              "unit",
              "display_order",
              "description",
              "concentration_min",
              "concentration_max"
            ],
            "additionalProperties": false
          }
        }
      },
      "required": [
        "port",
        "address",
        "name",
        "hmac_secret",
        "rs256_private_key",
        "rs256_public_key",
        "session_secret"
      ]
    },
    "modbus": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65534
        },
        "address": {
          "type": "string",
          "anyOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ],
          "description": "IPv4 or IPv6 address to bind the Modbus service to."
        },
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable Modbus TCP server"
        }
      },
      "required": [
        "port",
        "address"
      ]
    },
    "acquisition": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable data acquisition"
        },
        "interval_ms": {
          "type": "integer",
          "minimum": 10,
          "default": 1000,
          "description": "Data acquisition interval in milliseconds"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "photoacoustic": {
      "type": "object",
      "properties": {
        "input_device": {
          "type": [
            "string",
            "null"
          ],
          "description": "The input device to use for data acquisition use first to use the first available device (mutually exclusive with input_file)"
        },
        "input_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "The input file to use for data acquisition (mutually exclusive with input_device)"
        },
        "frequency": {
          "type": "number",
          "minimum": 100,
          "maximum": 20000,
          "description": "The excitation frequency in Hz"
        },
        "bandwidth": {
          "type": "number",
          "minimum": 1,
          "maximum": 250,
          "description": "Filter bandwidth in Hz"
        },
        "frame_size": {
          "type": "integer",
          "minimum": 256,
          "maximum": 8192,
          "description": "Window size for FFT analysis"
        },
        "averages": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "description": "Number of spectra to average"
        },
        "sampling_rate": {
          "type": "integer",
          "minimum": 8192,
          "maximum": 196608,
          "description": "Sampling rate in Hz"
        },
        "precision": {
          "type": "integer",
          "enum": [
            8,
            16,
            24,
            32
          ],
          "description": "Precision of sampling (bits, allowed: 8, 16, 24, 32)"
        },
        "simulated_source": {
          "type": [
            "object",
            "null"
          ],
          "description": "Configuration for simulated photoacoustic sources (replaces mock_source and mock_correlation)",
          "properties": {
            "source_type": {
              "type": "string",
              "enum": [
                "mock",
                "universal"
              ],
              "default": "mock",
              "description": "Source type: 'mock' for simple MockSource or 'universal' for full physics simulation"
            },
            "correlation": {
              "type": "number",
              "minimum": -1.0,
              "maximum": 1.0,
              "default": 0.8,
              "description": "Inter-channel correlation coefficient [-1.0, 1.0] for dual-microphone configuration (used by mock source)"
            },
            "background_noise_amplitude": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.1,
              "description": "Background noise amplitude [0.0, 1.0] - thermal and electronic noise"
            },
            "resonance_frequency": {
              "type": "number",
              "minimum": 100.0,
              "maximum": 20000.0,
              "default": 2100.0,
              "description": "Helmholtz resonance frequency [Hz] - cell acoustic resonance"
            },
            "laser_modulation_depth": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.8,
              "description": "Laser modulation depth [0.0, 1.0] - photoacoustic signal strength"
            },
            "signal_amplitude": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.5,
              "description": "Base photoacoustic signal amplitude [0.0, 1.0]"
            },
            "phase_opposition_degrees": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 180.0,
              "default": 180.0,
              "description": "Phase opposition between microphones [degrees] - differential configuration"
            },
            "temperature_drift_factor": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 0.1,
              "default": 0.01,
              "description": "Temperature drift effect factor [0.0, 0.1] - thermal stability"
            },
            "gas_flow_noise_factor": {
              "type": "number",
              "minimum": 0.0,
              "maximum": 1.0,
              "default": 0.05,
              "description": "Gas flow noise factor [0.0, 1.0] - turbulent flow effects"
            },
            "snr_factor": {
              "type": "number",
              "minimum": 0.1,
              "maximum": 100.0,
              "default": 10.0,
              "description": "Signal-to-noise ratio factor [0.1, 100.0] - measurement quality"
            },
            "modulation_mode": {
              "type": "string",
              "enum": [
                "amplitude",
                "pulsed"
              ],
              "default": "amplitude",
              "description": "Laser modulation mode: 'amplitude' (continuous) or 'pulsed' (discrete)"
            },
            "pulse_width_seconds": {
              "type": "number",
              "minimum": 0.001,
              "maximum": 1.0,
              "default": 0.05,
              "description": "Pulse width [seconds] - for pulsed modulation mode"
            },
            "pulse_frequency_hz": {
              "type": "number",
              "minimum": 1.0,
              "maximum": 1000.0,
              "default": 20.0,
              "description": "Pulse frequency [Hz] - for pulsed modulation mode"
            }
          },
          "required": [
            "source_type"
          ],
          "allOf": [
            {
              "if": {
                "properties": {
                  "modulation_mode": {
                    "const": "pulsed"
                  }
                }
              },
              "then": {
                "required": [
                  "pulse_width_seconds",
                  "pulse_frequency_hz"
                ]
              }
            }
          ],
          "additionalProperties": false
        },
        "record_consumer": {
          "type": "boolean",
          "default": false,
          "description": "Use a record consumer for testing purposes"
        },
        "record_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "File to record the data to)"
        }
      },
      "required": [
        "frequency",
        "bandwidth",
        "frame_size",
        "averages"
      ],
      "oneOf": [
        {
          "required": [
            "input_device"
          ]
        },
        {
          "required": [
            "input_file"
          ]
        }
      ]
    },
    "access": {
      "type": "object",
      "description": "Access control settings for users and OAuth2 clients",
      "properties": {
        "duration": {
          "type": "integer",
          "minimum": 3600,
          "maximum": 31557600
        },
        "iss": {
          "type": "string",
          "description": "issuer for the jwt"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "user": {
                "type": "string",
                "description": "Username for authentication"
              },
              "pass": {
                "type": "string",
                "description": "Base64-encoded password hash (created with openssl passwd -5 | base64 -w0)"
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "read:api",
                    "write:api",
                    "admin:api",
                    "openid",
                    "profile",
                    "email"
                  ]
                },
                "minItems": 1,
                "description": "List of permissions granted to the user"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Email address of the user"
              },
              "name": {
                "type": "string",
                "description": "Full name of the user"
              }
            },
            "required": [
              "user",
              "pass",
              "permissions"
            ]
          },
          "description": "List of users with their credentials and permissions"
        },
        "clients": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "client_id": {
                "type": "string",
                "description": "Unique identifier for the OAuth2 client"
              },
              "allowed_callbacks": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri",
                  "description": "Valid callback URI for this client"
                },
                "minItems": 1,
                "description": "List of allowed callback URLs for this OAuth2 client"
              },
              "default_scope": {
                "type": "string",
                "description": "Default scopes granted to this client"
              }
            },
            "required": [
              "client_id",
              "allowed_callbacks"
            ]
          },
          "description": "List of OAuth2 clients with their identifiers and allowed callback URLs"
        }
      },
      "required": [
        "users",
        "clients"
      ]
    },
    "generix": {
      "type": "object",
      "description": "OAuth2 and OpenID Connect configuration (client side)",
      "properties": {
        "provider": {
          "type": "string",
          "enum": [
            "generix"
          ],
          "description": "OAuth provider type. Only 'generix' is supported"
        },
        "api_base_url": {
          "type": "string",
          "format": "uri",
          "description": "Base URL of the API server"
        },
        "authority": {
          "type": "string",
          "format": "uri",
          "description": "Authority URL for the OAuth2/OpenID Connect provider"
        },
        "client_id": {
          "type": "string",
          "description": "Client ID for OAuth2/OpenID Connect"
        },
        "scope": {
          "type": "string",
          "description": "Scopes requested by the client (space-separated)"
        },
        "redirect_uri": {
          "type": "string",
          "format": "uri",
          "description": "Redirect URI for the client after authentication"
        },
        "audience": {
          "type": "string",
          "description": "Audience in the JWT token"
        },
        "token_issuer": {
          "type": "string",
          "format": "uri",
          "description": "Token issuer base URL"
        },
        "jwks_endpoint": {
          "type": "string",
          "format": "uri",
          "description": "Endpoint for JSON Web Key Set (JWKS)"
        },
        "domain": {
          "type": "string",
          "description": "Domain for the client application"
        },
        "issuer": {
          "type": "string",
          "description": "Issuer for checking the iss claim in JWT tokens"
        }
      },
      "required": [
        "provider",
        "api_base_url",
        "client_id",
        "scope",
        "redirect_uri",
        "audience",
        "token_issuer",
        "jwks_endpoint",
        "domain",
        "issuer"
      ]
    },
    "processing": {
      "type": "object",
      "description": "Audio processing pipeline configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable or disable the processing consumer"
        },
        "result_buffer_size": {
          "type": "integer",
          "minimum": 1,
          "description": "Buffer size for processing results broadcasting"
        },
        "default_graph": {
          "type": "object",
          "description": "Default processing graph configuration",
          "properties": {
            "id": {
              "type": "string",
              "description": "Graph identifier"
            },
            "nodes": {
              "type": "array",
              "description": "List of processing nodes",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Node identifier"
                  },
                  "node_type": {
                    "type": "string",
                    "enum": [
                      "input",
                      "filter",
                      "differential",
                      "channel_selector",
                      "channel_mixer",
                      "gain",
                      "photoacoustic_output",
                      "record",
                      "streaming",
                      "computing_peak_finder",
                      "computing_concentration",
                      "action_universal"
                    ],
                    "description": "Type of processing node"
                  },
                  "parameters": {
                    "description": "Node-specific parameters"
                  }
                },
                "required": [
                  "id",
                  "node_type"
                ],
                "allOf": [
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "filter"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bandpass",
                                "lowpass",
                                "highpass"
                              ],
                              "description": "Filter type"
                            },
                            "center_frequency": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 50000,
                              "description": "Center frequency in Hz (required for bandpass filters)"
                            },
                            "bandwidth": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 10000,
                              "description": "Bandwidth in Hz (required for bandpass filters)"
                            },
                            "cutoff_frequency": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 50000,
                              "description": "Cutoff frequency in Hz (required for lowpass and highpass filters)"
                            },
                            "order": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10,
                              "default": 1,
                              "description": "Filter order - each order adds 6dB/octave roll-off (1st order = 6dB/octave, 2nd = 12dB/octave, etc. Note:bandpass filters support only even orders)"
                            }
                          },
                          "required": [
                            "type",
                            "order"
                          ],
                          "allOf": [
                            {
                              "if": {
                                "properties": {
                                  "type": {
                                    "const": "bandpass"
                                  }
                                }
                              },
                              "then": {
                                "required": [
                                  "center_frequency",
                                  "bandwidth"
                                ]
                              }
                            },
                            {
                              "if": {
                                "properties": {
                                  "type": {
                                    "enum": [
                                      "lowpass",
                                      "highpass"
                                    ]
                                  }
                                }
                              },
                              "then": {
                                "required": [
                                  "cutoff_frequency"
                                ]
                              }
                            }
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "parameters"
                      ]
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "gain"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "gain_db": {
                              "type": "number",
                              "description": "Gain value in decibels (dB). Positive values amplify, negative values attenuate."
                            }
                          },
                          "required": [
                            "gain_db"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "parameters"
                      ]
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "record"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "record_file": {
                              "type": "string",
                              "description": "Path to the output recording file"
                            },
                            "max_size": {
                              "type": "integer",
                              "minimum": 1,
                              "description": "Maximum size per recording file in kilobytes"
                            },
                            "auto_delete": {
                              "type": "boolean",
                              "description": "Whether to automatically delete files when max_size (kb) is reached"
                            },
                            "total_limit": {
                              "type": "integer",
                              "minimum": 1,
                              "description": "Maximum total size of all recordings in kilobytes. When exceeded, oldest files are deleted."
                            }
                          },
                          "required": [
                            "record_file"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "parameters"
                      ]
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "channel_selector"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "target_channel": {
                              "type": "string",
                              "enum": [
                                "ChannelA",
                                "ChannelB"
                              ],
                              "description": "Target channel for selection"
                            }
                          },
                          "required": [
                            "target_channel"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "parameters"
                      ]
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "channel_mixer"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "strategy": {
                              "type": "string",
                              "enum": [
                                "add",
                                "subtract",
                                "multiply",
                                "average"
                              ],
                              "description": "Mixing strategy for channels"
                            }
                          },
                          "required": [
                            "strategy"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "parameters"
                      ]
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "computing_peak_finder"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "detection_threshold": {
                              "type": "number",
                              "minimum": 0.0,
                              "maximum": 1.0,
                              "default": 0.1,
                              "description": "Minimum relative amplitude (0.0 to 1.0) for peak detection"
                            },
                            "frequency_min": {
                              "type": "number",
                              "minimum": 1.0,
                              "maximum": 50000.0,
                              "default": 20.0,
                              "description": "Lower bound of frequency range to analyze (Hz)"
                            },
                            "frequency_max": {
                              "type": "number",
                              "minimum": 1.0,
                              "maximum": 50000.0,
                              "default": 20000.0,
                              "description": "Upper bound of frequency range to analyze (Hz)"
                            },
                            "smoothing_factor": {
                              "type": "number",
                              "minimum": 0.0,
                              "maximum": 1.0,
                              "default": 0.7,
                              "description": "Smoothing factor for moving average (0.0 = no smoothing, 1.0 = maximum smoothing)"
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "computing_concentration"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "computing_peak_finder_id": {
                              "type": "string",
                              "description": "ID of the PeakFinderNode to use as data source. If not specified, uses the most recent peak data available."
                            },
                            "polynomial_coefficients": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              },
                              "minItems": 5,
                              "maxItems": 5,
                              "description": "Array of 5 coefficients [a₀, a₁, a₂, a₃, a₄] for polynomial concentration calculation: Concentration(ppm) = a₀ + a₁*A + a₂*A² + a₃*A³ + a₄*A⁴ where A is the peak amplitude"
                            },
                            "temperature_compensation": {
                              "type": "boolean",
                              "default": false,
                              "description": "Enable temperature compensation for improved accuracy"
                            },
                            "spectral_line_id": {
                              "type": "string",
                              "description": "Optional identifier for the spectral line being analyzed (e.g., 'CO₂_4.26μm', 'CH₄_3.39μm')"
                            },
                            "min_amplitude_threshold": {
                              "type": "number",
                              "minimum": 0.0,
                              "maximum": 10.0,
                              "default": 0.001,
                              "description": "Minimum amplitude threshold for valid concentration calculation"
                            },
                            "max_concentration_ppm": {
                              "type": "number",
                              "minimum": 0.1,
                              "maximum": 1000000.0,
                              "default": 10000.0,
                              "description": "Maximum concentration limit for safety/validation (ppm)"
                            }
                          },
                          "required": [
                            "polynomial_coefficients"
                          ],
                          "additionalProperties": false
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "const": "action_universal"
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "buffer_capacity": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 10000,
                              "default": 100,
                              "description": "Size of the circular buffer for historical data storage (number of entries)"
                            },
                            "monitored_nodes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Array of computing node IDs to monitor (e.g., concentration_co2, peak_finder_ch4)"
                            },
                            "concentration_threshold": {
                              "type": "number",
                              "minimum": 0.0,
                              "maximum": 1000000.0,
                              "description": "Concentration threshold in ppm for triggering display alerts"
                            },
                            "amplitude_threshold": {
                              "type": "number",
                              "minimum": 0.0,
                              "maximum": 100,
                              "description": "Amplitude threshold in dB for triggering signal strength alerts"
                            },
                            "update_interval_ms": {
                              "type": "integer",
                              "minimum": 10,
                              "maximum": 60000,
                              "default": 1000,
                              "description": "Minimum milliseconds between display updates for throttling"
                            },
                            "driver": {
                              "type": "object",
                              "description": "Display driver configuration for output to various endpoints",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": ["https_callback", "redis", "kafka","log"],
                                  "description": "Type of display driver"
                                },
                                "config": {
                                  "type": "object",
                                  "description": "Driver-specific configuration",
                                  "additionalProperties": true
                                }
                              },
                              "required": ["type"]
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "node_type": {
                          "enum": [
                            "input",
                            "streaming",
                            "photoacoustic_output",
                            "differential"
                          ]
                        }
                      }
                    },
                    "then": {
                      "properties": {
                        "parameters": {
                          "type": "null"
                        }
                      }
                    }
                  }
                ],
                "additionalProperties": false
              }
            },
            "connections": {
              "type": "array",
              "description": "List of connections between nodes",
              "items": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "Source node identifier"
                  },
                  "to": {
                    "type": "string",
                    "description": "Target node identifier"
                  }
                },
                "required": [
                  "from",
                  "to"
                ],
                "additionalProperties": false
              }
            },
            "output_node": {
              "type": [
                "string",
                "null"
              ],
              "description": "Output node identifier"
            }
          },
          "required": [
            "nodes"
          ]
        },
        "performance": {
          "type": "object",
          "description": "Processing performance settings",
          "properties": {
            "max_processing_time_us": {
              "type": "integer",
              "minimum": 1,
              "description": "Maximum processing time per frame (microseconds)"
            },
            "enable_stats": {
              "type": "boolean",
              "description": "Enable detailed processing statistics"
            },
            "stats_interval_ms": {
              "type": "integer",
              "minimum": 1,
              "description": "Statistics update interval (milliseconds)"
            }
          }
        }
      }
    },
    "thermal_regulation": {
      "type": "object",
      "description": "Thermal regulation system configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable thermal regulation system"
        },
        "i2c_buses": {
          "type": "object",
          "description": "I2C bus configurations",
          "patternProperties": {
            "^[a-zA-Z_][a-zA-Z0-9_]*$": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["native", "cp2112","mock"],
                  "description": "I2C bus type"
                },
                "device": {
                  "type": "string",
                  "description": "Device path or USB identifier"
                },
                "usb_vendor_id": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "USB vendor ID for CP2112"
                },
                "usb_product_id": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 65535,
                  "description": "USB product ID for CP2112"
                },
                "pwm_controllers": {
                  "type": "array",
                  "maxItems": 32,
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "integer",
                        "minimum": 64,
                        "maximum": 127,
                        "description": "I2C address (0x40-0x7F)"
                      },
                      "channels": {
                        "type": "integer",
                        "const": 16,
                        "description": "Number of PWM channels"
                      },
                      "frequency_hz": {
                        "type": "integer",
                        "minimum": 24,
                        "maximum": 1526,
                        "default": 1000,
                        "description": "PWM frequency in Hz"
                      }
                    },
                    "required": ["address"],
                    "additionalProperties": false
                  }
                },
                "adc_controllers": {
                  "type": "array",
                  "maxItems": 4,
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "integer",
                        "minimum": 72,
                        "maximum": 75,
                        "description": "I2C address (0x48-0x4B)"
                      },
                      "channels": {
                        "type": "integer",
                        "const": 4,
                        "description": "Number of ADC channels"
                      },
                      "resolution": {
                        "type": "integer",
                        "const": 16,
                        "description": "ADC resolution in bits"
                      },
                      "voltage_ref": {
                        "type": "number",
                        "minimum": 0.1,
                        "maximum": 6.144,
                        "default": 3.3,
                        "description": "Voltage reference in volts"
                      },
                      "gain": {
                        "type": "string",
                        "enum": ["GAIN_TWOTHIRDS", "GAIN_ONE", "GAIN_TWO", "GAIN_FOUR", "GAIN_EIGHT", "GAIN_SIXTEEN"],
                        "default": "GAIN_TWO",
                        "description": "ADC gain setting"
                      }
                    },
                    "required": ["address"],
                    "additionalProperties": false
                  }
                },
                "gpio_controllers": {
                  "type": "array",
                  "maxItems": 8,
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "integer",
                        "minimum": 32,
                        "maximum": 39,
                        "description": "I2C address (0x20-0x27)"
                      },
                      "channels": {
                        "type": "integer",
                        "const": 16,
                        "description": "Number of GPIO channels"
                      },
                      "type": {
                        "type": "string",
                        "const": "CAT9555",
                        "description": "GPIO controller type"
                      },
                      "function": {
                        "type": "string",
                        "enum": ["h_bridge_control", "general_purpose", "status_indication"],
                        "default": "h_bridge_control",
                        "description": "Primary function of GPIO controller"
                      }
                    },
                    "required": ["address"],
                    "additionalProperties": false
                  }
                },
                "bus_settings": {
                  "type": "object",
                  "properties": {
                    "frequency_hz": {
                      "type": "integer",
                      "minimum": 10000,
                      "maximum": 400000,
                      "default": 100000,
                      "description": "I2C clock frequency in Hz"
                    },
                    "timeout_ms": {
                      "type": "integer",
                      "minimum": 100,
                      "maximum": 10000,
                      "default": 1000,
                      "description": "Bus timeout in milliseconds"
                    },
                    "max_retries": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 10,
                      "default": 3,
                      "description": "Maximum retry attempts"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["type", "device"],
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "regulators": {
          "type": "array",
          "maxItems": 32,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                "description": "Unique regulator identifier"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "description": "Human-readable name"
              },
              "enabled": {
                "type": "boolean",
                "default": true,
                "description": "Enable this regulator"
              },
              "i2c_bus": {
                "type": "string",
                "description": "Reference to I2C bus configuration"
              },
              "temperature_sensor": {
                "type": "object",
                "properties": {
                  "adc_address": {
                    "type": "integer",
                    "minimum": 72,
                    "maximum": 75,
                    "description": "ADC I2C address"
                  },
                  "adc_channel": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 3,
                    "description": "ADC channel number"
                  },
                  "sensor_type": {
                    "type": "string",
                    "enum": ["thermocouple_k", "thermocouple_j", "rtd_pt100", "rtd_pt1000", "thermistor_ntc", "generic"],
                    "default": "generic",
                    "description": "Temperature sensor type"
                  }
                },
                "required": ["adc_address", "adc_channel"],
                "additionalProperties": false
              },
              "actuators": {
                "type": "object",
                "properties": {
                  "thermal_control": {
                    "type": "object",
                    "properties": {
                      "pwm_controller": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "integer",
                            "minimum": 64,
                            "maximum": 127,
                            "description": "PWM controller I2C address"
                          },
                          "channel": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 15,
                            "description": "PWM channel number"
                          }
                        },
                        "required": ["address", "channel"],
                        "additionalProperties": false
                      },
                      "direction_controller": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "integer",
                            "minimum": 32,
                            "maximum": 39,
                            "description": "GPIO controller I2C address"
                          },
                          "gpio_pins": {
                            "type": "object",
                            "properties": {
                              "h_bridge_in1": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 15,
                                "description": "H-Bridge IN1 GPIO pin"
                              },
                              "h_bridge_in2": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 15,
                                "description": "H-Bridge IN2 GPIO pin"
                              },
                              "h_bridge_enable": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 15,
                                "description": "H-Bridge enable GPIO pin"
                              }
                            },
                            "required": ["h_bridge_in1", "h_bridge_in2", "h_bridge_enable"],
                            "additionalProperties": false
                          }
                        },
                        "required": ["address", "gpio_pins"],
                        "additionalProperties": false
                      },
                      "thermal_modes": {
                        "type": "object",
                        "properties": {
                          "heating_tec": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "Mode description"
                              },
                              "h_bridge_direction": {
                                "type": "string",
                                "enum": ["forward", "reverse"],
                                "description": "H-Bridge direction"
                              },
                              "power_range": {
                                "type": "string",
                                "pattern": "^\\d+(-\\d+)?%$",
                                "description": "Power range specification"
                              },
                              "max_power_percent": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 100,
                                "default": 100,
                                "description": "Maximum power percentage"
                              }
                            },
                            "required": ["description", "h_bridge_direction", "power_range"],
                            "additionalProperties": false
                          },
                          "cooling_tec": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "Mode description"
                              },
                              "h_bridge_direction": {
                                "type": "string",
                                "enum": ["forward", "reverse"],
                                "description": "H-Bridge direction"
                              },
                              "power_range": {
                                "type": "string",
                                "pattern": "^\\d+(-\\d+)?%$",
                                "description": "Power range specification"
                              },
                              "max_power_percent": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 100,
                                "default": 100,
                                "description": "Maximum power percentage"
                              }
                            },
                            "required": ["description", "h_bridge_direction", "power_range"],
                            "additionalProperties": false
                          },
                          "heating_resistive": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "Mode description"
                              },
                              "h_bridge_direction": {
                                "type": "string",
                                "enum": ["forward", "reverse"],
                                "description": "H-Bridge direction"
                              },
                              "power_range": {
                                "type": "string",
                                "pattern": "^\\d+(-\\d+)?%$",
                                "description": "Power range specification"
                              },
                              "max_power_percent": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 100,
                                "default": 100,
                                "description": "Maximum power percentage"
                              }
                            },
                            "required": ["description", "h_bridge_direction", "power_range"],
                            "additionalProperties": false
                          }
                        },
                        "required": ["heating_tec", "cooling_tec", "heating_resistive"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["pwm_controller", "direction_controller", "thermal_modes"],
                    "additionalProperties": false
                  }
                },
                "required": ["thermal_control"],
                "additionalProperties": false
              },
              "temperature_conversion": {
                "type": "object",
                "properties": {
                  "formula": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Temperature conversion formula"
                  },
                  "adc_resolution": {
                    "type": "integer",
                    "minimum": 8,
                    "maximum": 24,
                    "description": "ADC resolution in bits"
                  },
                  "voltage_reference": {
                    "type": "number",
                    "minimum": 0.1,
                    "maximum": 10.0,
                    "description": "Voltage reference in volts"
                  },
                  "conversion_type": {
                    "type": "string",
                    "enum": ["ntc_thermistor","polynomial", "linear", "lookup_table"],
                    "default": "polynomial",
                    "description": "Conversion algorithm type"
                  }
                },
                "required": ["formula", "adc_resolution", "voltage_reference"],
                "additionalProperties": false
              },
              "pid_parameters": {
                "type": "object",
                "properties": {
                  "kp": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Proportional gain"
                  },
                  "ki": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Integral gain"
                  },
                  "kd": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Derivative gain"
                  },
                  "setpoint": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000,
                    "description": "Target temperature setpoint in Kelvin"
                  },
                  "output_min": {
                    "type": "number",
                    "description": "Minimum output value"
                  },
                  "output_max": {
                    "type": "number",
                    "description": "Maximum output value"
                  },
                  "integral_max": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Maximum integral value (anti-windup)"
                  }
                },
                "required": ["kp", "ki", "kd", "setpoint", "output_min", "output_max", "integral_max"],
                "additionalProperties": false
              },
              "control_parameters": {
                "type": "object",
                "properties": {
                  "sampling_frequency_hz": {
                    "type": "number",
                    "minimum": 0.1,
                    "maximum": 1000,
                    "description": "Sampling frequency in Hz"
                  },
                  "pwm_frequency_hz": {
                    "type": "number",
                    "minimum": 24,
                    "maximum": 1526,
                    "description": "PWM frequency in Hz"
                  }
                },
                "required": ["sampling_frequency_hz", "pwm_frequency_hz"],
                "additionalProperties": false
              },
              "safety_limits": {
                "type": "object",
                "properties": {
                  "min_temperature_k": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000,
                    "description": "Minimum allowed temperature in Kelvin"
                  },
                  "max_temperature_k": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000,
                    "description": "Maximum allowed temperature in Kelvin"
                  },
                  "max_heating_duty": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Maximum heating duty cycle percentage"
                  },
                  "max_cooling_duty": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Maximum cooling duty cycle percentage"
                  }
                },
                "required": ["min_temperature_k", "max_temperature_k", "max_heating_duty", "max_cooling_duty"],
                "additionalProperties": false
              }
            },
            "required": ["id", "name", "i2c_bus", "temperature_sensor", "actuators", "temperature_conversion", "pid_parameters", "control_parameters", "safety_limits"],
            "additionalProperties": false
          }
        },
        "global_settings": {
          "type": "object",
          "properties": {
            "global_sampling_rate_hz": {
              "type": "number",
              "minimum": 0.1,
              "maximum": 1000,
              "default": 10.0,
              "description": "Global sampling rate for all regulators"
            },
            "max_concurrent_regulators": {
              "type": "integer",
              "minimum": 1,
              "maximum": 64,
              "default": 32,
              "description": "Maximum number of concurrent regulators"
            },
            "resource_sharing": {
              "type": "object",
              "properties": {
                "i2c_arbitration_timeout_ms": {
                  "type": "integer",
                  "minimum": 10,
                  "maximum": 10000,
                  "default": 100,
                  "description": "I2C bus arbitration timeout"
                },
                "max_operation_queue_size": {
                  "type": "integer",
                  "minimum": 10,
                  "maximum": 10000,
                  "default": 100,
                  "description": "Maximum operation queue size"
                },
                "priority_scheduling": {
                  "type": "boolean",
                  "default": false,
                  "description": "Enable priority-based scheduling"
                }
              },
              "additionalProperties": false
            },
            "monitoring": {
              "type": "object",
              "properties": {
                "enable_performance_monitoring": {
                  "type": "boolean",
                  "default": true,
                  "description": "Enable performance monitoring"
                },
                "metrics_interval_s": {
                  "type": "number",
                  "minimum": 0.1,
                  "maximum": 3600,
                  "default": 1.0,
                  "description": "Metrics collection interval"
                },
                "enable_thermal_history": {
                  "type": "boolean",
                  "default": false,
                  "description": "Enable thermal history logging"
                },
                "history_buffer_size": {
                  "type": "integer",
                  "minimum": 100,
                  "maximum": 100000,
                  "default": 1000,
                  "description": "History buffer size"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "visualization"
  ]
}